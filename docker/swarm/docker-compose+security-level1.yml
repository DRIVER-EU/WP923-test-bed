---
version: '3'
services: 
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    networks:
      - testbed-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  # Certificate Management Service
  cert_mgt:
    build: ./cert_mgt
    image: drivereu/cert_mgt:1.0.1
    hostname: certmgt
    networks:
      - testbed-net
    ports:
     - "8442:8442"
     - "8443:8443"
     - "9090:8080"
    deploy:
      labels:
        - "traefik.docker.network=traefik-net"
        - "traefik.enable=true"
        # We could have routes for all ports, using segment labels: https://docs.traefik.io/configuration/backends/docker/#on-containers-with-multiple-ports-segment-labels
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/ejbca/"
        - "traefik.port=8442"

  broker:
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker
    depends_on:
      - zookeeper
    networks:
      - testbed-net
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    volumes:
      - ./broker/config/ssl:/etc/kafka/secrets
      # For debugging, create log4j.properties based on log4j.properties.orig in folder 'broker/config' and customize it.
      #      - ./broker/config/log4j.properties:/etc/kafka/log4j.properties
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      
      # The listener name must be 'PLAINTEXT' like the protocol name, as workaround for https://github.com/confluentinc/schema-registry/issues/648
      # SSL is enabled in Kafka Docker image only if KAFKA_ADVERTISED_LISTENERS has SSL://
      KAFKA_ADVERTISED_LISTENERS: 'SSL://${TESTBED_HOST}:${BROKER_PORT},PLAINTEXT://broker:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,PLAINTEXT:PLAINTEXT'
      KAFKA_LISTENERS: 'SSL://0.0.0.0:${BROKER_PORT},PLAINTEXT://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 100000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000

      # Change log levels for debugging
      # More info: https://github.com/confluentinc/cp-docker-images/blob/master/debian/kafka/include/etc/confluent/docker/log4j.properties.template
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka=INFO,org.apache.cxf=INFO,org.ow2.authzforce=INFO"
      # KAFKA_LOG4J_ROOT_LOGLEVEL: "INFO"
      # KAFKA_TOOLS_LOG4J_LOGLEVEL: "INFO"

      # SSL settings
      # See https://docs.confluent.io/current/installation/docker/docs/tutorials/clustered-deployment-ssl.html#id2 for docker image specifics, 
      # and https://docs.confluent.io/current/kafka/authentication_ssl.html in general
      # Uncomment line below for SSL debugging
      # KAFKA_OPTS: '-Djavax.net.debug=all'
      # PLAINTEXT protocol used by schema_registry and kafka_rest services. TODO: make them use SSL.
      # Name of file in /etc/kafka/secrets
      KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      # Name of file in /etc/kafka/secrets
      KAFKA_SSL_KEYSTORE_FILENAME: keystore.p12
      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds
      KAFKA_SSL_CLIENT_AUTH: required


  schema_registry:
    image: confluentinc/cp-schema-registry:5.0.0
    depends_on:
      - zookeeper
      - broker
    networks:
      - testbed-net
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:${SCHEMA_REGISTRY_PORT}'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:32181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      # By default, ConsumerConfig 'fetch.max.wait.ms' = 500 triggering READ on <kafkastore.topic> ('_schemas' by default) via broker every 500 ms! Increase this value if you need to reduce network traffic or debug
      # ConsumerConfig properties, e.g. fetch.max.wait.ms can be set via SchemaRegistryConfig by prefixing with 'kafkastore.'
      SCHEMA_REGISTRY_KAFKASTORE_FETCH_MAX_WAIT_MS: 30000
      # SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 300000
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

  kafka_rest:
    image: confluentinc/cp-kafka-rest:5.0.0
    hostname: kafka_rest
    depends_on:
      - zookeeper
      - schema_registry
      - broker
    networks:
      - testbed-net
    environment:
      KAFKA_REST_HOST_NAME: kafka_rest
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema_registry:${SCHEMA_REGISTRY_PORT}'
      KAFKA_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      KAFKA_REST_CUB_KAFKA_TIMEOUT: 300
  
  kafka_topics_ui:
    image: drivereu/kafka-topics-ui:0.0.1
    depends_on:
      - kafka_rest
    networks:
      - traefik-net
      - testbed-net
    environment:
      KAFKA_REST_PROXY_URL: 'http://kafka_rest:8082'
      PROXY: 'true'
      MAX_BYTES: 5000000
      RELATIVE_PROXY_URL: 'true'
      RECORD_POLL_TIMEOUT: 10000
    deploy:
      labels:
        - "traefik.port=8000"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/topics-ui/"

  kafka_schema_registry_ui:
    image: drivereu/schema-registry-ui:0.0.1
    depends_on:
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    environment:
      SCHEMAREGISTRY_URL: 'http://schema_registry:${SCHEMA_REGISTRY_PORT}'
      RELATIVE_PROXY_URL: 'true'
      PROXY: 'true'
    deploy:
      labels:
        - "traefik.port=8000"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/schema-ui/"
        
  postgres:
    image: postgres:9.6
    hostname: postgres
    networks:
      - traefik-net
      - testbed-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: TRIAL_ADMIN
    volumes:
       - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    
  admintool:
    image: drivereu/test-bed-admin:latest
    depends_on:
      - postgres
      - broker
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    volumes:
      - ./admintool-config/gateways.json:/opt/application/config/gateways.json
      - ./admintool-config/solutions.json:/opt/application/config/solutions.json
      - ./admintool-config/topics.json:/opt/application/config/topics.json
      - ./admintool-config/standards.json:/opt/application/config/standards.json
    environment:
      KAFKA_BROKER_URL: broker:${BROKER_PORT}
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      zookeeper_host: zookeeper
      zookeeper_port: 32181
      schema_registry_url: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      testbed_secure_mode: 'false'
      testbed_init_auto: 'false'
      management_ca_cert_path: http://localhost:9090
      cert_handler_url: https://localhost:8443
      cert_pem_handler_url: https://localhost:8443
      security_rest_path_group: https://localhost:9443
      security_rest_path_topic: https://localhost:9443
    deploy:
      labels:
        - "traefik.port=8090"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/test-bed-admin/"

  afteractionreview:
    image: drivereu/after-action-review:latest
    depends_on:
      - postgres
      - broker
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    deploy:
      labels:
        - "traefik.port=8095"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/after-action-review/"
  
  pgadmin:
    image: fenglc/pgadmin4
    depends_on:
      - postgres
    restart: unless-stopped
    deploy:
      labels:
        - "traefik.port=5050"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/pgadmin/"
    
  time_service:
    image: drivereu/test-bed-time-service:develop-latest
    depends_on:
      - broker
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    environment:
      KAFKA_BROKER_URL: broker:9092
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      AUTO_REGISTER_SCHEMAS: 'true'
    deploy:
      labels:
        - "traefik.port=8100"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/time-service/"
      
  large_file_service:
    image: drivereu/large-file-service:develop-latest
    environment:
      URL: http://${TESTBED_HOST}/large-file-service/
    networks:
      - traefik-net
    deploy:
      labels:
        - "traefik.port=80"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/large-file-service/"
      
networks:
  traefik-net:
    external: true
  testbed-net:
    driver: overlay
    
volumes:
  postgres-data:
