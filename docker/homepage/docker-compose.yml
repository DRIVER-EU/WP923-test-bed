---
version: '3'
services:

  homepage:
    image: drivereu/homepage
    environment:
      hostname: driver-testbed.eu
      title: ${TESTBED_TITLE}
      # ssl: 'False'
      homepage: homepage:3050
      admin: admintool:8090
      tmt: trial_management_tool:3210
      aar: afteractionreview:8095
      lfs: large_file_service:9090
      time: time_service:8100
      schemas: kafka_schema_registry_ui:8000
      topics: kafka_topics_ui:8000
    volumes:
    #  - certs:/usr/src/app/certs
      - homepagestaticfiles:/usr/src/app/public
    # Do not start the proxy.js from  as we are using the proxy service (Apache) instead
    command: "true"

  # HTTPS/WSS reverse-proxy based on Apache HTTP server
  proxy:
    build: proxy
    image: drivereu/apache2-letsencrypt-proxy:1.1.2
    depends_on: 
      - letsencryptstore
      - homepage 
    # restart: always
    volumes:
      - etcletsencrypt:/etc/letsencrypt
      - varletsencrypt:/var/lib/letsencrypt
      - homepagestaticfiles:/usr/local/apache2/htdocs
    ports:
      # http 80 is required for the Letsencrypt challenge
      - "80:80"
      - "443:443"
      # Expose this port if and only if BACKEND_URL_VIA_8443 is set (e.g. for Keycloak proxying)
      # - "8443:8443"
    environment:
      # See .env.sample for examples

      # SSL settings
      # Whitespace-separated list of domain names to set Apache's ServerName/ServerAlias to. If Letsencrypt usage enabled, a certificate for all those domains is requested from letsencrypt.org.
      DOMAIN_NAMES: ${DOMAIN_NAMES} 
      # Certificates from letsencrypt.org are used unless this variable value is left empty or undefined; in which case the key and certificate in 'proxy' folder are used (for development/testing only!)
      LETS_ENCRYPT_EMAIL: ${LETS_ENCRYPT_EMAIL}
      # Optional arguments passed to cerbot tool to request certificate from letsencrypt.org, e.g. '--test-cert' to use the staging environment instead of default Production environment which is rate-limited, therefore not recommended for development/testing.
      LETS_ENCRYPT_CERTBOT_FLAGS: ${LETS_ENCRYPT_CERTBOT_FLAGS}
      # Apache SSLUseStapling On|Off
      SSL_USE_STAPLING: ${SSL_USE_STAPLING}

      # OpenID Connect client settings
      OIDC_PROVIDER_METADATA_URL: ${OIDC_PROVIDER_METADATA_URL}
      # Sets mod_auth_openidc's OIDCSSLValidateServer variable
      OIDC_VALIDATE_PROVIDER_CERT: ${OIDC_VALIDATE_PROVIDER_CERT}
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}

      # Define the backend URL where to proxy HTTPS requests on port 8443 (in which case you must EXPOSE PORT 8443 above), e.g. Keycloak URL ("http://${HOST}:8080/"); or leave undefined/empty if not required
      #BACKEND_URL_VIA_8443: ${BACKEND_URL_VIA_8443}
    
      TESTBED_TITLE: ${TESTBED_TITLE} 
      ADMINTOOL_HOST_PORT: admintool:8090
      TMT_HOST_PORT: trial_management_tool:3210
      AAR_HOST_PORT: afteractionreview:8095
      LFS_HOST_PORT: large_file_service:9090
      TIME_SERVICE_HOST_PORT: time_service:8100
      SCHEMA_REGISTRY_UI_HOST_PORT: kafka_schema_registry_ui:8000
      TOPICS_UI_HOST_PORT: kafka_topics_ui:8000

#    networks:
      # If any backend of the proxy is on different network(s) like Keycloak, you need to add them here as well
#      - tb6-core_default
      #- iam_default     
  
    command: sh -c "/usr/local/bin/launcher-verbose.sh"
    
  letsencryptstore:
    image: busybox
    volumes:
      - etcletsencrypt:/etc/letsencrypt
      - varletsencrypt:/var/lib/letsencrypt   
  
volumes:
  # database-OST:
  #postgres-data:
  #trial-data:
  varletsencrypt:
  etcletsencrypt:
  homepagestaticfiles:

#networks:
#  proxy:
#    driver: overlay
# If any backend of the proxy is on different network(s) like Keycloak, you need to declare them too
# iam_default
#    external: true
#tb6-core_default:
#    external: true
