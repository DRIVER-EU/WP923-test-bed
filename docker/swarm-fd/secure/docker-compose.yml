---
version: '3'
services: 

# Certificate Management Service
  cert_mgt:
    image: drivereu/cert_mgt:2.0.0
    ports:
     #- "8442:8442"
     # This endpoint is for admins, requires authentication with admin certificate
     - "${CERT_MGT_PORT}:8443"
     #- "9090:8080"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    # volumes:
      # Broker's SSL keypair is private (the private key actually) therefore should be generated on the trial's testbed docker host during the trial setup, 
      # and a certificate must be generated for the new broker's DNS domain name, e.g. "tb5.${TESTBED_HOST}"
      #- ./broker/config/ssl:/etc/kafka/secrets
      # Process to generate the keypair and certificate for domain "tb5.${TESTBED_HOST}" as main domain and "tb4.${TESTBED_HOST}" as alternative one:
      #   1) Generate keypair (remove any previous existing keypair)
      #     $ rm keystore.p12
      #     $ keytool -genkeypair -alias tb5.${TESTBED_HOST} -dname "CN=tb5.${TESTBED_HOST},O=DRIVER-PROJECT.EU" -keyalg RSA -keysize 4096 -storetype pkcs12 -keystore keystore.p12
      #   2) Generate CSR (Certificate Signing Request for the CA)
      #     $ keytool -certreq -alias tb5.${TESTBED_HOST} -keystore keystore.p12 -file server.csr
      #   3) Get the certificate signed by the root CA
      #     $ keytool -keystore ../../../cert_mgt/root-ca.p12 -alias ca -gencert -rfc -infile server.csr -outfile server-crt-by-ca.pem -dname "CN=tb5.${TESTBED_HOST},O=DRIVER-PROJECT.EU" -ext "san=dns:tb5.${TESTBED_HOST},dns:tb4.${TESTBED_HOST}" -ext "eku=clientAuth,serverAuth" -validity 9999
      #   4) Import the new signed certificate into the broker's keystore
      #     $ keytool -keystore keystore.p12 -alias tb5.${TESTBED_HOST} -importcert -file server-crt-by-ca.pem
      # For debugging, create log4j.properties based on log4j.properties.orig in folder 'broker/config' and customize it.
      #      - ./broker/config/log4j.properties:/etc/kafka/log4j.properties
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      
      # The listener name must be 'PLAINTEXT' like the protocol name, as workaround for https://github.com/confluentinc/schema-registry/issues/648
      # SSL is enabled in Kafka Docker image only if KAFKA_ADVERTISED_LISTENERS has SSL://
      KAFKA_ADVERTISED_LISTENERS: 'SSL://${TESTBED_HOST}:${BROKER_PORT},PLAINTEXT://broker:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,PLAINTEXT:PLAINTEXT'
      KAFKA_LISTENERS: 'SSL://0.0.0.0:${BROKER_PORT},PLAINTEXT://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 100000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000

      # Change log levels for debugging
      # More info: https://github.com/confluentinc/cp-docker-images/blob/master/debian/kafka/include/etc/confluent/docker/log4j.properties.template
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka=INFO,org.apache.cxf=INFO,org.ow2.authzforce=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "INFO"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "INFO"

      # SSL settings
      # See https://docs.confluent.io/current/installation/docker/docs/tutorials/clustered-deployment-ssl.html#id2 for docker image specifics, 
      # and https://docs.confluent.io/current/kafka/authentication_ssl.html in general
      # Uncomment line below for SSL debugging
      # KAFKA_OPTS: '-Djavax.net.debug=all'
      # PLAINTEXT protocol used by schema_registry and kafka_rest services. TODO: make them use SSL.
      # Name of file in /etc/kafka/secrets
      KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      # Name of file in /etc/kafka/secrets
      KAFKA_SSL_KEYSTORE_FILENAME: keystore.p12
      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds
      KAFKA_SSL_CLIENT_AUTH: required
    
    command: sh -c "cd /etc/kafka/secrets && curl -v ${BROKER_SECRETS_ZIP_URL} -o secrets.zip && jar xf secrets.zip && /etc/confluent/docker/run"

  schema_registry:
    image: confluentinc/cp-schema-registry:5.0.0
    depends_on:
      - zookeeper
      - broker
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:${SCHEMA_REGISTRY_PORT}'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:32181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      # By default, ConsumerConfig 'fetch.max.wait.ms' = 500 triggering READ on <kafkastore.topic> ('_schemas' by default) via broker every 500 ms! Increase this value if you need to reduce network traffic or debug
      # ConsumerConfig properties, e.g. fetch.max.wait.ms can be set via SchemaRegistryConfig by prefixing with 'kafkastore.'
      SCHEMA_REGISTRY_KAFKASTORE_FETCH_MAX_WAIT_MS: 30000
      # SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 300000
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

  kafka_rest:
    image: confluentinc/cp-kafka-rest:5.0.0
    hostname: kafka_rest
    depends_on:
      - zookeeper
      - schema_registry
      - broker
    environment:
      KAFKA_REST_HOST_NAME: kafka_rest
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema_registry:${SCHEMA_REGISTRY_PORT}'
      KAFKA_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      KAFKA_REST_CUB_KAFKA_TIMEOUT: 300
  
  kafka_topics_ui:
    image: drivereu/kafka-topics-ui:0.0.1
    depends_on:
      - kafka_rest
    ports:
      - "${KAFKA_TOPICS_UI_PORT}:8000"
    environment:
      KAFKA_REST_PROXY_URL: 'http://kafka_rest:8082'
      PROXY: 'true'
      MAX_BYTES: 5000000
      RELATIVE_PROXY_URL: 'true'
      RECORD_POLL_TIMEOUT: 10000

  kafka_schema_registry_ui:
    image: drivereu/schema-registry-ui:0.0.1
    depends_on:
      - schema_registry
    ports:
      - "${SCHEMA_REGISTRY_UI_PORT}:8000"
    environment:
      SCHEMAREGISTRY_URL: 'http://schema_registry:${SCHEMA_REGISTRY_PORT}'
      RELATIVE_PROXY_URL: 'true'
      PROXY: 'true'
        
  postgres:
    image: postgres:9.6
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: TRIAL_ADMIN
    volumes:
       - postgres-data:/var/lib/postgresql/${DB_NAME}/data
    restart: unless-stopped
    
  admintool:
    image: drivereu/test-bed-admin:latest
    depends_on:
      - cert_mgt
      - postgres
      - broker
      - schema_registry
    ports: 
      - "${ADMINTOOL_PORT}:8090"
    environment:
      KAFKA_BROKER_URL: broker:9092
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      zookeeper_host: zookeeper
      zookeeper_port: 32181
      schema_registry_url: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      testbed_secure_mode: 'AUTHENTICATION'
      testbed_init_auto: 'false'
      management_ca_cert_path: http://cert_mgt:8080
      cert_handler_url: https://cert_mgt:8443
      cert_pem_handler_url: https://cert_mgt:8443
      # Unused
      security_rest_path_group: https://authorization_service:8443
      security_rest_path_topic: https://authorization_service:8443
    command: sh -c "curl 'https://raw.githubusercontent.com/DRIVER-EU/test-bed/master/docker/swarm/wtfc.sh' -o '/opt/wtfc.sh' && chmod a+x /opt/wtfc.sh && /opt/wtfc.sh --progress --timeout=240 --interval=10 --status=0 curl -kv https://cert_mgt:8442/ejbca/ && /bin/sh /opt/application/run.sh"
      
#  afteractionreview:
#    image: drivereu/after-action-review:latest
#    depends_on:
#      - admintool
#    ports:
#      - "${AARTOOL_PORT}:8095"
#    environment:
#      KAFKA_BROKER_URL: broker:9092
#      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}

  pgadmin:
    image: fenglc/pgadmin4
    depends_on:
      - postgres
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT}:5050"
    
  time_service:
    image: drivereu/test-bed-time-service:latest
    depends_on:
      - broker
      - schema_registry
    environment:
      KAFKA_BROKER_URL: broker:9092
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      AUTO_REGISTER_SCHEMAS: 'false'
    ports:
      - "${TIME_PORT}:8100"
        
  trial_management_tool:
    image: drivereu/trial-management-tool:latest
    depends_on:
      - broker
      - schema_registry
    ports:
      - "${TMT_PORT}:3210"
    environment:
      CLIENT_ID: TB-TrialMgmt
      KAFKA_HOST: broker:9092
      SCHEMA_REGISTRY: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      TRIAL_MANAGER_SERVER_PORT: 3210
      PRODUCE: system_request_change_of_trial_stage,system_tm_phase_message,system_tm_role_player,system_tm_session_mgmt
      SSL: 'false'
      SSL_PFX: certs/TB-TrialMgmt.p12
      SSL_PASSPHRASE: changeit
      SSL_CA: certs/test-ca.pem
    volumes:
      - trial-data:/app/trials      

volumes:
  postgres-data:
  trial-data: