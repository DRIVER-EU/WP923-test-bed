---
version: '3'
services: 
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    networks:
      - testbed-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker
    depends_on:
      - zookeeper
    networks:
      testbed-net:
          aliases:
            - ${TESTBED_HOST}
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      
      # The listener name must be 'PLAINTEXT' like the protocol name, as workaround for https://github.com/confluentinc/schema-registry/issues/648
      # SSL is enabled in Kafka Docker image only if KAFKA_ADVERTISED_LISTENERS has SSL://
      KAFKA_ADVERTISED_LISTENERS: 'EXTERNAL://${TESTBED_HOST}:${BROKER_PORT},PLAINTEXT://broker:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_LISTENERS: 'EXTERNAL://0.0.0.0:${BROKER_PORT},PLAINTEXT://0.0.0.0:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 100000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000

  schema_registry:
    image: confluentinc/cp-schema-registry:5.0.0
    depends_on:
      - zookeeper
      - broker
    networks:
      - testbed-net
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:${SCHEMA_REGISTRY_PORT}'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:32181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      # By default, ConsumerConfig 'fetch.max.wait.ms' = 500 triggering READ on <kafkastore.topic> ('_schemas' by default) via broker every 500 ms! Increase this value if you need to reduce network traffic or debug
      # ConsumerConfig properties, e.g. fetch.max.wait.ms can be set via SchemaRegistryConfig by prefixing with 'kafkastore.'
      SCHEMA_REGISTRY_KAFKASTORE_FETCH_MAX_WAIT_MS: 30000
      # SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 300000
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

  kafka_rest:
    image: confluentinc/cp-kafka-rest:5.0.0
    hostname: kafka_rest
    depends_on:
      - zookeeper
      - schema_registry
      - broker
    networks:
      - testbed-net
    environment:
      KAFKA_REST_HOST_NAME: kafka_rest
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema_registry:${SCHEMA_REGISTRY_PORT}'
      KAFKA_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      KAFKA_REST_CUB_KAFKA_TIMEOUT: 300
  
  kafka_topics_ui:
    image: drivereu/kafka-topics-ui:0.0.1
    depends_on:
      - kafka_rest
    networks:
      - traefik-net
      - testbed-net
    ports:
      - "3660:8000"
    environment:
      KAFKA_REST_PROXY_URL: 'http://kafka_rest:8082'
      PROXY: 'true'
      MAX_BYTES: 5000000
      RELATIVE_PROXY_URL: 'true'
      RECORD_POLL_TIMEOUT: 10000
    deploy:
      labels:
        - "traefik.port=8000"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/topics-ui/"

  kafka_schema_registry_ui:
    image: drivereu/schema-registry-ui:0.0.1
    depends_on:
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    ports:
      - "3661:8000"
    environment:
      SCHEMAREGISTRY_URL: 'http://schema_registry:${SCHEMA_REGISTRY_PORT}'
      RELATIVE_PROXY_URL: 'true'
      PROXY: 'true'
    deploy:
      labels:
        - "traefik.port=8000"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/schema-ui/"
        
  postgres:
    image: postgres:9.6
    hostname: postgres
    networks:
      - traefik-net
      - testbed-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: TRIAL_ADMIN
    volumes:
       - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    
  admintool:
    image: drivereu/test-bed-admin:latest
    depends_on:
      - postgres
      - broker
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
     # As a temporary workaround for the AdminTool frontend not working behind traefik (non-secure WebSocket over HTTPS issue), we open the AdminTool port to the outside (not secure!) directly like for the schema registry
    ports: 
      - "${ADMINTOOL_PORT}:8090"
    # Volumes replaced by command (down below) using curl to download all JSON config files
    volumes:
       # wtfc.sh has to be put on the docker host
      # - /home/driver/dev/test-bed/docker/swarm/wtfc.sh:/opt/wtfc.sh
      - /home/driver/dev/test-bed/docker/swarm/admintool-config/gateways.json:/opt/application/config/gateways.json
      - /home/driver/dev/test-bed/docker/swarm/admintool-config/solutions.json:/opt/application/config/solutions.json
      - /home/driver/dev/test-bed/docker/swarm/admintool-config/topics.json:/opt/application/config/topics.json
      - /home/driver/dev/test-bed/docker/swarm/admintool-config/standards.json:/opt/application/config/standards.json
    environment:
      KAFKA_BROKER_URL: broker:9092
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      zookeeper_host: zookeeper
      zookeeper_port: 32181
      schema_registry_url: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      testbed_secure_mode: 'DEVELOP'
      testbed_init_auto: 'false'
      # management_ca_cert_path: http://cert_mgt:8080
      # cert_handler_url: https://cert_mgt:8443
      # cert_pem_handler_url: https://cert_mgt:8443
      # Unused
      security_rest_path_group: https://authorization_service:8443
      security_rest_path_topic: https://authorization_service:8443
#    command: sh -c "curl -k 'https://151.101.192.133/DRIVER-EU/test-bed/master/docker/swarm/admintool-config/{gateways,solutions,standards,topics}.json' -o '/opt/application/config/#1.json' && /opt/wtfc.sh --progress --timeout=240 --interval=10 --status=0 nc -w 5 -vz cert_mgt 8442 && cd /opt/application && java -jar ./admin-service-1.2.15.jar --server.use-forward-headers=true"
    deploy:
      labels:
        - "traefik.port=8090"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        # We should use a "PathPrefixStrip:/test-bed-admin/" but this doesn't work, probably because the webpack of the admintool frontend is not configured to handle a path prefix.
        # One solution seems to customize the webpack configuration with the 'publicPath' property. TO BE TESTED.
        # More info: https://stackoverflow.com/questions/54069708/how-to-host-a-webpack-app-behind-a-reverse-proxy-on-a-specific-path
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/test-bed-admin/"
        # Using PathPrefix:/ doesn't work either. Seems the issue is attempt to use ws (non-secure websocket) over https (blocked by browser Chrome/Firefox):
        # https://github.com/webpack/webpack-dev-server/issues/763
        # - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/"
        - "traefik.frontend.passHostHeader=true"
        # https://docs.traefik.io/configuration/backends/docker/#custom-headers
        - "traefik.frontend.headers.customRequestHeaders=X-Forwarded-Proto:https||X-Forwarded-Port:443"

  afteractionreview:
    image: drivereu/after-action-review:latest
    depends_on:
      - postgres
      - broker
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    ports:
      - "${AARTOOL_PORT}:8095"
    deploy:
      labels:
        - "traefik.port=8095"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/after-action-review/"
    environment:
      KAFKA_BROKER_URL: broker:9092
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
  
  pgadmin:
    image: fenglc/pgadmin4
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - traefik-net
    ports:
      - "${PGADMIN_PORT}:5050"
    deploy:
      labels:
        - "traefik.port=5050"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/pgadmin/"
    
  time_service:
    image: drivereu/test-bed-time-service:latest
    depends_on:
      - broker
      - schema_registry
    networks:
      - traefik-net
      - testbed-net
    environment:
      KAFKA_BROKER_URL: broker:9092
      SCHEMA_REGISTRY_URL: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      AUTO_REGISTER_SCHEMAS: 'false'
    ports:
      - "${TIME_PORT}:8100"
    deploy:
      labels:
        - "traefik.port=8100"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefixStrip:/time-service/"
      
  large_file_service:
    image: drivereu/large-file-service:develop-latest
    environment:
      URL: http://${TESTBED_HOST}/large-file-service/
    networks:
      - traefik-net
    deploy:
      labels:
        - "traefik.port=80"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/large-file-service/"
      
  wms_service:
    image: drivereu/test-bed-wms-service:latest
    hostname: wmsservice
    environment:
      URL: http://${TESTBED_HOST}/wms/
      WMS_PORT: 5106
      WMS_HOST: wmsservice
      WMS_FOLDER: /server/data
      WMS_EXTERNAL_PORT: 5106
      WMS_EXTERNAL_HOST: http://${TESTBED_HOST}/wms/
      WMS_EXTERNAL_ADDRESS: http://${TESTBED_HOST}/wms/
      WMS_KAFKA_HOST: broker:9092
      WMS_SCHEMA_REGISTRY: http://schema_registry:${SCHEMA_REGISTRY_PORT}
      WMS_CORS_ORIGIN: https://oefen-veiligheidsregio.lcms.nl
      WMS_CORS_HEADERS: 'authorization, content-type'
    ports:
      - 5106:5106
    depends_on:
      - broker
      - schema_registry

    networks:
      - traefik-net
      - testbed-net
    deploy:
      labels:
        - "traefik.port=5101"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${TESTBED_HOST};PathPrefix:/wms/"

networks:
  traefik-net:
    external: true
  testbed-net:
    driver: overlay
    
volumes:
  postgres-data: