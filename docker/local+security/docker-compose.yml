---
version: '3.4'
services:

  # Certificate Management Service
  cert_mgt:
    build: ./cert_mgt
    hostname: certmgt
    ports:
     - "8442:8442"
     - "8443:8443"
  
  authorization_service:
    depends_on:
      - cert_mgt
    build: 
      context: ./authorization_service
      args:
        JAR_VERSION: "1.1.0"
    hostname: authz
    links: 
     - cert_mgt:certmgt
    ports:
     - "9443:8443"
    volumes:
     - ./authorization_service/application.properties:/application.properties
     - ./authorization_service/config:/opt/driver-testbed-sec-authz-service
     - ./wtfc.sh:/opt/wtfc.sh
    environment:
      JAVA_OPTS: "-Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Djavax.xml.accessExternalSchema=all -Xms1024m -Xmx2048m -XX:+UseConcMarkSweepGC -server"

    # healthcheck start_period option does not stop other services to start although this service is not "healthy" yet :-( Intended Docker design? 
    # Using alternative "wait-for-it" script to prevent dependent services from starting too soon. More info:
    # https://docs.docker.com/compose/startup-order/
    # https://stackoverflow.com/questions/31746182/docker-compose-wait-for-container-x-before-starting-y/35202892

    #healthcheck:
    #  test: nc -vz authz 8443
    #  interval: 10s
    #  #timeout: 10s
    #  retries: 10
    #  start_period: 60s
    command: sh -c "/opt/wtfc.sh --progress --timeout=120 --interval=10 --status=0 nc -w 5 -vz certmgt 8442 && java $${JAVA_OPTS} -jar /app.jar"
    
  zookeeper:
    depends_on:
      - authorization_service 
    image: confluentinc/cp-zookeeper:5.0.0
    hostname: zookeeper
    ports:
     - "3500:3500"
    volumes:
     - ./zookeeper/config/zookeeper.properties:/etc/kafka/zookeeper.properties
     - ./zookeeper/config/zookeeper_jaas.conf:/etc/kafka/zookeeper_jaas.conf
     - ./wtfc.sh:/opt/wtfc.sh
    environment:
      KAFKA_OPTS: '-Djava.security.auth.login.config=/etc/kafka/zookeeper_jaas.conf'
      ZOOKEEPER_CLIENT_PORT: 3500
      ZOOKEEPER_TICK_TIME: 2000

  kafka_sec_extensions:
    depends_on:
      - authorization_service
    build: 
      context: ./kafka_sec_extensions
      args:
         AUTHZFORCE_EXT_VERSION: "1.1.0"  
    volumes:
     - kafka-sec-ext-data:/kafka_sec_extensions

  broker:
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker
    links: 
     - authorization_service:authz
    depends_on:
      - zookeeper  
      - kafka_sec_extensions
    ports:
      - "3501:3501"
      - "9092:9092"
    volumes:
      - kafka-sec-ext-data:/opt/kafka_sec_extensions
      - ./broker/config/ssl:/etc/kafka/secrets
      - ./broker/config/authorizer:/etc/kafka/authorizer
      - ./wtfc.sh:/opt/wtfc.sh
      # For debugging, create log4j.properties based on log4j.properties.orig in folder 'broker/config' and customize it.
      #      - ./broker/config/log4j.properties:/etc/kafka/log4j.properties
    command: sh -c "/opt/wtfc.sh --progress --timeout=120 --interval=10 --status=0 nc -w 5 -vz authz 8443 && /etc/confluent/docker/run"    
    environment:
      # https://docs.confluent.io/current/installation/docker/docs/configuration.html#confluent-kafka-cp-kafka
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:3500'
      # The listener name must be 'PLAINTEXT' like the protocol name, as workaround for https://github.com/confluentinc/schema-registry/issues/648
      # SSL is enabled in Kafka Docker image only if KAFKA_ADVERTISED_LISTENERS has SSL://
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'SSL://localhost:3501,PLAINTEXT://broker:9092'
      KAFKA_LISTENERS: 'SSL://0.0.0.0:3501,PLAINTEXT://0.0.0.0:9092'
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: 'PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 100000000
      # KAFKA_REPLICA_FETCH_WAIT_MAX_MS: 10000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      # Change log levels for debugging
      # More info: https://github.com/confluentinc/cp-docker-images/blob/master/debian/kafka/include/etc/confluent/docker/log4j.properties.template
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka=INFO,org.apache.cxf=INFO,org.ow2.authzforce=INFO"
      # KAFKA_LOG4J_ROOT_LOGLEVEL: "INFO"
      # KAFKA_TOOLS_LOG4J_LOGLEVEL: "INFO"

      # SSL
      # See https://docs.confluent.io/current/installation/docker/docs/tutorials/clustered-deployment-ssl.html#id2 for docker image specifics, 
      # and https://docs.confluent.io/current/kafka/authentication_ssl.html in general
      # Uncomment line below for SSL debugging
      # KAFKA_OPTS: '-Djavax.net.debug=all'
      # PLAINTEXT protocol used by schema_registry and kafka_rest services. TODO: make them use SSL.
      # Name of file in /etc/kafka/secrets
      KAFKA_SSL_TRUSTSTORE_FILENAME: truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      # Name of file in /etc/kafka/secrets
      KAFKA_SSL_KEYSTORE_FILENAME: keystore.p12
      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      
      # Kafka Authorizer extension
      CLASSPATH: '/opt/kafka_sec_extensions/lib/*' 
      KAFKA_AUTHORIZER_CLASS_NAME: 'org.ow2.authzforce.kafka.pep.CombinedXacmlAclAuthorizer'
      KAFKA_SUPER_USERS: 'User:CN=Admin Tool,OU=Authz Service Dev Project,OU=WP923,O=DRIVER-PROJECT.EU'
      KAFKA_ORG_OW2_AUTHZFORCE_KAFKA_PEP_XACML_PDP_URL: 'https://authz:8443/services/authz/pdp' 
      KAFKA_ORG_OW2_AUTHZFORCE_KAFKA_PEP_XACML_REQ_TMPL_LOCATION: 'file:///etc/kafka/authorizer/request.xacml.json.ftl'
      KAFKA_ORG_OW2_AUTHZFORCE_KAFKA_PEP_HTTP_CLIENT_CFG_LOCATION: '/etc/kafka/authorizer/http-client.xml'
      # Max size of authorization decision cache (use negative or zero value to disable)
      KAFKA_ORG_OW2_AUTHZFORCE_KAFKA_PEP_AUTHZ_CACHE_SIZE_MAX: -1

  schema_registry:
    image: confluentinc/cp-schema-registry:5.0.0
    hostname: schema_registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "3502:3502"
    environment:
      # By default, ConsumerConfig 'fetch.max.wait.ms' = 500 triggering READ on <kafkastore.topic> ('_schemas' by default) via broker every 500 ms! Increase this value if you need to reduce network traffic or debug
      # ConsumerConfig properties, e.g. fetch.max.wait.ms can be set via SchemaRegistryConfig by prefixing with 'kafkastore.'
      SCHEMA_REGISTRY_KAFKASTORE_FETCH_MAX_WAIT_MS: 30000
      # SCHEMA_REGISTRY_LOG4J_LOGGERS: "kafka=TRACE"      
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:3502'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:3500'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      # SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 300000
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

  kafka_rest:
    image: confluentinc/cp-kafka-rest:5.0.0
    hostname: kafka_rest
    depends_on:
      - zookeeper
      - schema_registry
      - broker
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: kafka_rest
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:3500'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema_registry:3502'
      KAFKA_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      KAFKA_REST_CUB_KAFKA_TIMEOUT: 300

  kafka_topics_ui:
    image: landoop/kafka-topics-ui:0.9.4
    hostname: kafka_topics_ui
    depends_on:
      - kafka_rest
    ports:
      - "3600:8000"
    environment:
      KAFKA_REST_PROXY_URL: 'http://kafka_rest:8082'
      PROXY: 'true'
      MAX_BYTES: 5000000
      RECORD_POLL_TIMEOUT: 10000

  kafka_schema_registry_ui:
    image: landoop/schema-registry-ui:0.9.5
    hostname: kafka_schema_registry_ui
    depends_on:
      - schema_registry
    ports:
      - "3601:8000"
    environment:
      SCHEMAREGISTRY_URL: 'http://schema_registry:3502'
      PROXY: 'true'
      
  postgres:
    image: postgres:9.6
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: TRIAL_ADMIN
    volumes:
       - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    
  admintool:
    image: drivereu/test-bed-admin:latest
    depends_on:
      - postgres
    ports:
      - "8090:8090"
    volumes:
      - ./admintool-config/gateways.json:/opt/application/config/gateways.json
      - ./admintool-config/solutions.json:/opt/application/config/solutions.json
      - ./admintool-config/topics.json:/opt/application/config/topics.json
      - ./admintool-config/standards.json:/opt/application/config/standards.json
  
  pgadmin:
    image: fenglc/pgadmin4
    depends_on:
      - postgres
    ports:
        - "5050:5050"
    restart: unless-stopped
      
volumes:
  postgres-data:
  kafka-sec-ext-data:
