---
version: '3'
services:

  # Database for idp service
  postgres:
      image: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: ${KEYCLOAK_PASSWORD}

  # Identity Provider (OpenID Connect) for Web-SSO, based on Keycloak
  keycloak:
      build:
        context: ./keycloak
        args:
          WEBAUTHN_PLUGIN_VERSION: "0.3.RELEASE"
      image: drivereu/keycloak:7.0.0-3
      hostname: driver-testbed.eu
      depends_on:
        - postgres
      volumes:
        # - ./keycloak/test-ca-crt.pem:/tmp/test-ca-crt.pem
        # - ./keycloak/themes/thales:/opt/jboss/keycloak/themes/thales
        # If you need to import a realm with volume below, the realm must have been exported with instructions from: https://github.com/jboss-dockerfiles/keycloak/tree/master/server#exporting-a-realm
        # $ docker exec -it docker_keycloak_1 sh -c "keycloak/bin/standalone.sh -Djboss.socket.binding.port-offset=100 -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.realmName=driver -Dkeycloak.migration.usersExportStrategy=REALM_FILE -Dkeycloak.migration.file=/tmp/driver-realm.json"
        - ./keycloak/l3-realm.json:/tmp/l3-realm.json
        - etcletsencrypt:/etc/letsencrypt
        - varletsencrypt:/var/lib/letsencrypt

      environment:
        # See .env.sample for examples of environment variables to be set, e.g. KEYCLOAK_PASSWORD
        # X509_CA_BUNDLE: /etc/x509/https/tls-ca-crt.pem
        DB_VENDOR: postgres
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: ${KEYCLOAK_PASSWORD}
        KEYCLOAK_USER: admin
        # Use uuidgen command to generate the password and set the variable in a .env file 
        KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}

        # KEYCLOAK_IMPORT cannot be used here because refers to objects from Webauthn plugin which is deployed after attempt to import the realm from KEYCLOAK_IMPORT -> fail
        # Workaround: in the command script , use Admin CLI to import the realm after startup if not there yet
        KEYCLOAK_IMPORTED_REALM: /tmp/l3-realm.json

        # To add a custom theme extend the Keycloak image add the theme to the /opt/jboss/keycloak/themes directory.
        # KEYCLOAK_WELCOME_THEME: thales
        # KEYCLOAK_DEFAULT_THEME: thales
        # KEYCLOAK_LOGLEVEL: DEBUG
        # ROOT_LOGLEVEL: INFO
        # JDBC_PARAMS: "connectTimeout=30000"
       
        # Set to true if behind a reverse-proxy, in which case Letsencrypt is not used at all (assuming the reverse-proxy handles HTTPS), and port 8080 must be exposed to be used as backend for the reverse-proxy
        PROXY_ADDRESS_FORWARDING: ${PROXY_ADDRESS_FORWARDING}
         
        # Letsencrypt (certbot) setup
        # WARNING: in order to use Letsencrypt, port 80 must be exposed by this configuration and mapped to internal port 80 (see down below)
        # Certificates from letsencrypt.org are used unless this variable value is left empty or undefined or PROXY_ADDRESS_FORWARDING=true; in which case a self-signed certificate auto-generated by Keycloak is used
        LETS_ENCRYPT_EMAIL: ${LETS_ENCRYPT_EMAIL}
        # Server hostname (Common Name) to be put in the SSL certificate issued by Letsencrypt if Letsencrypt certificate issuing is used (LETS_ENCRYPT_EMAIL non-empty).
        CERT_CN: ${CERT_CN}
        # Optional arguments passed to cerbot tool to request certificate from letsencrypt.org, e.g. '--test-cert' to use the staging environment instead of default Production environment which is rate-limited, therefore not recommended for development/testing.
        LETS_ENCRYPT_CERTBOT_FLAGS: ${LETS_ENCRYPT_CERTBOT_FLAGS}
       
      #ports:
        # Expose port 80 if and only if Letsencrypt is used (for the http challenge).
        #- 80:80
        # Expose this port mapped to 8080 if and only if PROXY_ADDRESS_FORWARDING=true (backend port for the reverse-proxy), else expose port 8443
        #- 58080:8080
        # Expose this port if and only if PROXY_ADDRESS_FORWARDING=false, i.e. Keycloak is not accessed via a reverse-proxy
        #- 8443:8443
      entrypoint: sh "/opt/jboss/tools/docker-entrypoint-wrapper.sh"
      # command: ["-b", "0.0.0.0", "-bmanagement", "0.0.0.0"] 

#  letsencryptstore:
#    image: busybox
#    volumes:
#      - etcletsencrypt:/etc/letsencrypt
#      - varletsencrypt:/var/lib/letsencrypt   
  
volumes:
  varletsencrypt:
  etcletsencrypt:
  postgres_data:
    driver: local
